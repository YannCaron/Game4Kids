{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Game",
				"Game4kids"
			],
			[
				"init",
				"initMap_"
			],
			[
				"set",
				"setComment"
			],
			[
				"Gene",
				"GenerateEvents"
			],
			[
				"Data",
				"DataPointUtils"
			],
			[
				"agent",
				"agentNode"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/**\n * Blockly Demos: Code\n *\n * Copyright 2012 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview JavaScript for Blockly's Code demo.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * Create a namespace for the application.\n */\nvar Code = {};\n\n/**\n * Lookup for names of supported languages.  Keys should be in ISO 639 format.\n */\nCode.LANGUAGE_NAME = {\n  'ar': 'العربية',\n  'be-tarask': 'Taraškievica',\n  'br': 'Brezhoneg',\n  'ca': 'Català',\n  'cs': 'Česky',\n  'da': 'Dansk',\n  'de': 'Deutsch',\n  'el': 'Ελληνικά',\n  'en': 'English',\n  'es': 'Español',\n  'et': 'Eesti',\n  'fa': 'فارسی',\n  'fr': 'Français',\n  'he': 'עברית',\n  'hrx': 'Hunsrik',\n  'hu': 'Magyar',\n  'ia': 'Interlingua',\n  'is': 'Íslenska',\n  'it': 'Italiano',\n  'ja': '日本語',\n  'kab': 'Kabyle',\n  'ko': '한국어',\n  'mk': 'Македонски',\n  'ms': 'Bahasa Melayu',\n  'nb': 'Norsk Bokmål',\n  'nl': 'Nederlands, Vlaams',\n  'oc': 'Lenga d\\'òc',\n  'pl': 'Polski',\n  'pms': 'Piemontèis',\n  'pt-br': 'Português Brasileiro',\n  'ro': 'Română',\n  'ru': 'Русский',\n  'sc': 'Sardu',\n  'sk': 'Slovenčina',\n  'sr': 'Српски',\n  'sv': 'Svenska',\n  'ta': 'தமிழ்',\n  'th': 'ภาษาไทย',\n  'tlh': 'tlhIngan Hol',\n  'tr': 'Türkçe',\n  'uk': 'Українська',\n  'vi': 'Tiếng Việt',\n  'zh-hans': '简体中文',\n  'zh-hant': '正體中文'\n};\n\n/**\n * List of RTL languages.\n */\nCode.LANGUAGE_RTL = ['ar', 'fa', 'he', 'lki'];\n\n/**\n * Blockly's main workspace.\n * @type {Blockly.WorkspaceSvg}\n */\nCode.workspace = null;\n\n/**\n * Extracts a parameter from the URL.\n * If the parameter is absent default_value is returned.\n * @param {string} name The name of the parameter.\n * @param {string} defaultValue Value to return if parameter not found.\n * @return {string} The parameter value or the default value if not found.\n */\nCode.getStringParamFromUrl = function(name, defaultValue) {\n  var val = location.search.match(new RegExp('[?&]' + name + '=([^&]+)'));\n  return val ? decodeURIComponent(val[1].replace(/\\+/g, '%20')) : defaultValue;\n};\n\n/**\n * Get the language of this user from the URL.\n * @return {string} User's language.\n */\nCode.getLang = function() {\n  var lang = Code.getStringParamFromUrl('lang', '');\n  if (Code.LANGUAGE_NAME[lang] === undefined) {\n    // Default to English.\n    lang = 'en';\n  }\n  return lang;\n};\n\n/**\n * Is the current language (Code.LANG) an RTL language?\n * @return {boolean} True if RTL, false if LTR.\n */\nCode.isRtl = function() {\n  return Code.LANGUAGE_RTL.indexOf(Code.LANG) != -1;\n};\n\n/**\n * Load blocks saved on App Engine Storage or in session/local storage.\n * @param {string} defaultXml Text representation of default blocks.\n */\nCode.loadBlocks = function(defaultXml) {\n  try {\n    var loadOnce = window.sessionStorage.loadOnceBlocks;\n  } catch(e) {\n    // Firefox sometimes throws a SecurityError when accessing sessionStorage.\n    // Restarting Firefox fixes this, so it looks like a bug.\n    var loadOnce = null;\n  }\n  if ('BlocklyStorage' in window && window.location.hash.length > 1) {\n    // An href with #key trigers an AJAX call to retrieve saved blocks.\n    BlocklyStorage.retrieveXml(window.location.hash.substring(1));\n  } else if (loadOnce) {\n    // Language switching stores the blocks during the reload.\n    delete window.sessionStorage.loadOnceBlocks;\n    var xml = Blockly.Xml.textToDom(loadOnce);\n    Blockly.Xml.domToWorkspace(xml, Code.workspace);\n  } else if (defaultXml) {\n    // Load the editor with default starting blocks.\n    var xml = Blockly.Xml.textToDom(defaultXml);\n    Blockly.Xml.domToWorkspace(xml, Code.workspace);\n  } else if ('BlocklyStorage' in window) {\n    // Restore saved blocks in a separate thread so that subsequent\n    // initialization is not affected from a failed load.\n    window.setTimeout(BlocklyStorage.restoreBlocks, 0);\n  }\n};\n\n/**\n * Save the blocks and reload with a different language.\n */\nCode.changeLanguage = function() {\n  // Store the blocks for the duration of the reload.\n  // MSIE 11 does not support sessionStorage on file:// URLs.\n  if (window.sessionStorage) {\n    var xml = Blockly.Xml.workspaceToDom(Code.workspace);\n    var text = Blockly.Xml.domToText(xml);\n    window.sessionStorage.loadOnceBlocks = text;\n  }\n\n  var languageMenu = document.getElementById('languageMenu');\n  var newLang = encodeURIComponent(\n      languageMenu.options[languageMenu.selectedIndex].value);\n  var search = window.location.search;\n  if (search.length <= 1) {\n    search = '?lang=' + newLang;\n  } else if (search.match(/[?&]lang=[^&]*/)) {\n    search = search.replace(/([?&]lang=)[^&]*/, '$1' + newLang);\n  } else {\n    search = search.replace(/\\?/, '?lang=' + newLang + '&');\n  }\n\n  window.location = window.location.protocol + '//' +\n      window.location.host + window.location.pathname + search;\n};\n\n/**\n * Bind a function to a button's click event.\n * On touch enabled browsers, ontouchend is treated as equivalent to onclick.\n * @param {!Element|string} el Button element or ID thereof.\n * @param {!Function} func Event handler to bind.\n */\nCode.bindClick = function(el, func) {\n  if (typeof el == 'string') {\n    el = document.getElementById(el);\n  }\n  el.addEventListener('click', func, true);\n  el.addEventListener('touchend', func, true);\n};\n\n/**\n * Load the Prettify CSS and JavaScript.\n */\nCode.importPrettify = function() {\n  var script = document.createElement('script');\n  script.setAttribute('src', 'https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js');\n  document.head.appendChild(script);\n};\n\n/**\n * Compute the absolute coordinates and dimensions of an HTML element.\n * @param {!Element} element Element to match.\n * @return {!Object} Contains height, width, x, and y properties.\n * @private\n */\nCode.getBBox_ = function(element) {\n  var height = element.offsetHeight;\n  var width = element.offsetWidth;\n  var x = 0;\n  var y = 0;\n  do {\n    x += element.offsetLeft;\n    y += element.offsetTop;\n    element = element.offsetParent;\n  } while (element);\n  return {\n    height: height,\n    width: width,\n    x: x,\n    y: y\n  };\n};\n\n/**\n * User's language (e.g. \"en\").\n * @type {string}\n */\nCode.LANG = Code.getLang();\n\n/**\n * List of tab names.\n * @private\n */\nCode.TABS_ = ['blocks', 'javascript', 'php', 'python', 'dart', 'lua', 'xml'];\n\nCode.selected = 'blocks';\n\n/**\n * Switch the visible pane when a tab is clicked.\n * @param {string} clickedName Name of tab clicked.\n */\nCode.tabClick = function(clickedName) {\n  // If the XML tab was open, save and render the content.\n  if (document.getElementById('tab_xml').className == 'tabon') {\n    var xmlTextarea = document.getElementById('content_xml');\n    var xmlText = xmlTextarea.value;\n    var xmlDom = null;\n    try {\n      xmlDom = Blockly.Xml.textToDom(xmlText);\n    } catch (e) {\n      var q =\n          window.confirm(MSG['badXml'].replace('%1', e));\n      if (!q) {\n        // Leave the user on the XML tab.\n        return;\n      }\n    }\n    if (xmlDom) {\n      Code.workspace.clear();\n      Blockly.Xml.domToWorkspace(xmlDom, Code.workspace);\n    }\n  }\n\n  if (document.getElementById('tab_blocks').className == 'tabon') {\n    Code.workspace.setVisible(false);\n  }\n  // Deselect all tabs and hide all panes.\n  for (var i = 0; i < Code.TABS_.length; i++) {\n    var name = Code.TABS_[i];\n    document.getElementById('tab_' + name).className = 'taboff';\n    document.getElementById('content_' + name).style.visibility = 'hidden';\n  }\n\n  // Select the active tab.\n  Code.selected = clickedName;\n  document.getElementById('tab_' + clickedName).className = 'tabon';\n  // Show the selected pane.\n  document.getElementById('content_' + clickedName).style.visibility =\n      'visible';\n  Code.renderContent();\n  if (clickedName == 'blocks') {\n    Code.workspace.setVisible(true);\n  }\n  Blockly.svgResize(Code.workspace);\n};\n\n/**\n * Populate the currently selected pane with content generated from the blocks.\n */\nCode.renderContent = function() {\n  var content = document.getElementById('content_' + Code.selected);\n  // Initialize the pane.\n  if (content.id == 'content_xml') {\n    var xmlTextarea = document.getElementById('content_xml');\n    var xmlDom = Blockly.Xml.workspaceToDom(Code.workspace);\n    var xmlText = Blockly.Xml.domToPrettyText(xmlDom);\n    xmlTextarea.value = xmlText;\n    xmlTextarea.focus();\n  } else if (content.id == 'content_javascript') {\n    Code.attemptCodeGeneration(Blockly.JavaScript, 'js');\n  } else if (content.id == 'content_python') {\n    Code.attemptCodeGeneration(Blockly.Python, 'py');\n  } else if (content.id == 'content_php') {\n    Code.attemptCodeGeneration(Blockly.PHP, 'php');\n  } else if (content.id == 'content_dart') {\n    Code.attemptCodeGeneration(Blockly.Dart, 'dart');\n  } else if (content.id == 'content_lua') {\n    Code.attemptCodeGeneration(Blockly.Lua, 'lua');\n  }\n};\n\n/**\n * Attempt to generate the code and display it in the UI, pretty printed.\n * @param generator {!Blockly.Generator} The generator to use.\n * @param prettyPrintType {string} The file type key for the pretty printer.\n */\nCode.attemptCodeGeneration = function(generator, prettyPrintType) {\n  var content = document.getElementById('content_' + Code.selected);\n  content.textContent = '';\n  if (Code.checkAllGeneratorFunctionsDefined(generator)) {\n    var code = generator.workspaceToCode(Code.workspace);\n\n    content.textContent = code;\n    if (typeof PR.prettyPrintOne == 'function') {\n      code = content.textContent;\n      code = PR.prettyPrintOne(code, prettyPrintType);\n      content.innerHTML = code;\n    }\n  }\n};\n\n/**\n * Check whether all blocks in use have generator functions.\n * @param generator {!Blockly.Generator} The generator to use.\n */\nCode.checkAllGeneratorFunctionsDefined = function(generator) {\n  var blocks = Code.workspace.getAllBlocks();\n  var missingBlockGenerators = [];\n  for (var i = 0; i < blocks.length; i++) {\n    var blockType = blocks[i].type;\n    if (!generator[blockType]) {\n      if (missingBlockGenerators.indexOf(blockType) === -1) {\n        missingBlockGenerators.push(blockType);\n      }\n    }\n  }\n\n  var valid = missingBlockGenerators.length == 0;\n  if (!valid) {\n    var msg = 'The generator code for the following blocks not specified for '\n        + generator.name_ + ':\\n - ' + missingBlockGenerators.join('\\n - ');\n    Blockly.alert(msg);  // Assuming synchronous. No callback.\n  }\n  return valid;\n};\n\n/**\n * Initialize Blockly.  Called on page load.\n */\nCode.init = function() {\n  Code.initLanguage();\n\n  var rtl = Code.isRtl();\n  var container = document.getElementById('content_area');\n  var onresize = function(e) {\n    var bBox = Code.getBBox_(container);\n    for (var i = 0; i < Code.TABS_.length; i++) {\n      var el = document.getElementById('content_' + Code.TABS_[i]);\n      el.style.top = bBox.y + 'px';\n      el.style.left = bBox.x + 'px';\n      // Height and width need to be set, read back, then set again to\n      // compensate for scrollbars.\n      el.style.height = bBox.height + 'px';\n      el.style.height = (2 * bBox.height - el.offsetHeight) + 'px';\n      el.style.width = bBox.width + 'px';\n      el.style.width = (2 * bBox.width - el.offsetWidth) + 'px';\n    }\n    // Make the 'Blocks' tab line up with the toolbox.\n    if (Code.workspace && Code.workspace.toolbox_.width) {\n      document.getElementById('tab_blocks').style.minWidth =\n          (Code.workspace.toolbox_.width - 38) + 'px';\n          // Account for the 19 pixel margin and on each side.\n    }\n  };\n  window.addEventListener('resize', onresize, false);\n\n  // The toolbox XML specifies each category name using Blockly's messaging\n  // format (eg. `<category name=\"%{BKY_CATLOGIC}\">`).\n  // These message keys need to be defined in `Blockly.Msg` in order to\n  // be decoded by the library. Therefore, we'll use the `MSG` dictionary that's\n  // been defined for each language to import each category name message\n  // into `Blockly.Msg`.\n  // TODO: Clean up the message files so this is done explicitly instead of\n  // through this for-loop.\n  for (var messageKey in MSG) {\n    if (messageKey.indexOf('cat') == 0) {\n      Blockly.Msg[messageKey.toUpperCase()] = MSG[messageKey];\n    }\n  }\n\n  // Construct the toolbox XML, replacing translated variable names.\n  var toolboxText = document.getElementById('toolbox').outerHTML;\n  toolboxText = toolboxText.replace(/(^|[^%]){(\\w+)}/g,\n      function(m, p1, p2) {return p1 + MSG[p2];});\n  var toolboxXml = Blockly.Xml.textToDom(toolboxText);\n\n  Code.workspace = Blockly.inject('content_blocks',\n      {grid:\n          {spacing: 25,\n           length: 3,\n           colour: '#ccc',\n           snap: true},\n       media: '../../media/',\n       rtl: rtl,\n       toolbox: toolboxXml,\n       zoom:\n           {controls: true,\n            wheel: true}\n      });\n\n  // Add to reserved word list: Local variables in execution environment (runJS)\n  // and the infinite loop detection function.\n  Blockly.JavaScript.addReservedWords('code,timeouts,checkTimeout');\n\n  Code.loadBlocks('');\n\n  if ('BlocklyStorage' in window) {\n    // Hook a save function onto unload.\n    BlocklyStorage.backupOnUnload(Code.workspace);\n  }\n\n  Code.tabClick(Code.selected);\n\n  Code.bindClick('trashButton',\n      function() {Code.discard(); Code.renderContent();});\n  Code.bindClick('runButton', Code.runJS);\n  // Disable the link button if page isn't backed by App Engine storage.\n  var linkButton = document.getElementById('linkButton');\n  if ('BlocklyStorage' in window) {\n    BlocklyStorage['HTTPREQUEST_ERROR'] = MSG['httpRequestError'];\n    BlocklyStorage['LINK_ALERT'] = MSG['linkAlert'];\n    BlocklyStorage['HASH_ERROR'] = MSG['hashError'];\n    BlocklyStorage['XML_ERROR'] = MSG['xmlError'];\n    Code.bindClick(linkButton,\n        function() {BlocklyStorage.link(Code.workspace);});\n  } else if (linkButton) {\n    linkButton.className = 'disabled';\n  }\n\n  for (var i = 0; i < Code.TABS_.length; i++) {\n    var name = Code.TABS_[i];\n    Code.bindClick('tab_' + name,\n        function(name_) {return function() {Code.tabClick(name_);};}(name));\n  }\n  onresize();\n  Blockly.svgResize(Code.workspace);\n\n  // Lazy-load the syntax-highlighting.\n  window.setTimeout(Code.importPrettify, 1);\n};\n\n/**\n * Initialize the page language.\n */\nCode.initLanguage = function() {\n  // Set the HTML's language and direction.\n  var rtl = Code.isRtl();\n  document.dir = rtl ? 'rtl' : 'ltr';\n  document.head.parentElement.setAttribute('lang', Code.LANG);\n\n  // Sort languages alphabetically.\n  var languages = [];\n  for (var lang in Code.LANGUAGE_NAME) {\n    languages.push([Code.LANGUAGE_NAME[lang], lang]);\n  }\n  var comp = function(a, b) {\n    // Sort based on first argument ('English', 'Русский', '简体字', etc).\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  };\n  languages.sort(comp);\n  // Populate the language selection menu.\n  var languageMenu = document.getElementById('languageMenu');\n  languageMenu.options.length = 0;\n  for (var i = 0; i < languages.length; i++) {\n    var tuple = languages[i];\n    var lang = tuple[tuple.length - 1];\n    var option = new Option(tuple[0], lang);\n    if (lang == Code.LANG) {\n      option.selected = true;\n    }\n    languageMenu.options.add(option);\n  }\n  languageMenu.addEventListener('change', Code.changeLanguage, true);\n\n  // Inject language strings.\n  document.title += ' ' + MSG['title'];\n  document.getElementById('title').textContent = MSG['title'];\n  document.getElementById('tab_blocks').textContent = MSG['blocks'];\n\n  document.getElementById('linkButton').title = MSG['linkTooltip'];\n  document.getElementById('runButton').title = MSG['runTooltip'];\n  document.getElementById('trashButton').title = MSG['trashTooltip'];\n};\n\n/**\n * Execute the user's code.\n * Just a quick and dirty eval.  Catch infinite loops.\n */\nCode.runJS = function() {\n  Blockly.JavaScript.INFINITE_LOOP_TRAP = '  checkTimeout();\\n';\n  var timeouts = 0;\n  var checkTimeout = function() {\n    if (timeouts++ > 1000000) {\n      throw MSG['timeout'];\n    }\n  };\n  var code = Blockly.JavaScript.workspaceToCode(Code.workspace);\n  Blockly.JavaScript.INFINITE_LOOP_TRAP = null;\n  try {\n    eval(code);\n  } catch (e) {\n    alert(MSG['badCode'].replace('%1', e));\n  }\n};\n\n/**\n * Discard all blocks from the workspace.\n */\nCode.discard = function() {\n  var count = Code.workspace.getAllBlocks().length;\n  if (count < 2 ||\n      window.confirm(Blockly.Msg.DELETE_ALL_BLOCKS.replace('%1', count))) {\n    Code.workspace.clear();\n    if (window.location.hash) {\n      window.location.hash = '';\n    }\n  }\n};\n\n// Load the Code demo's language strings.\ndocument.write('<script src=\"msg/' + Code.LANG + '.js\"></script>\\n');\n// Load Blockly's language strings.\ndocument.write('<script src=\"../../msg/js/' + Code.LANG + '.js\"></script>\\n');\n\nwindow.addEventListener('load', Code.init);\n",
			"file": "/home/cyann/projects/web/PhaserGames/js/blockly/demos/code/code.js",
			"file_size": 17456,
			"file_write_time": 131702714668308248,
			"settings":
			{
				"buffer_size": 17287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cyann/projects/web/Game4Kids/index.js",
			"settings":
			{
				"buffer_size": 22829,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cyann/projects/web/PhaserGames/js/blockly/demos/code/index.html",
			"settings":
			{
				"buffer_size": 11759,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cyann/projects/web/Game4Kids/index.html",
			"settings":
			{
				"buffer_size": 12195,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
			],
			[
				"",
				""
			]
		],
		[
			[
				[
					"Execute file",
					""
				],
				[
					"Execute project",
					""
				]
			],
			[
				"Execute file",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 629.0
	},
	"console":
	{
		"height": 280.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/cyann/projects/web/Game4Kids",
		"/home/cyann/projects/web/Game4Kids/js",
		"/home/cyann/projects/web/Game4Kids/js/jszip",
		"/home/cyann/projects/web/Game4Kids/msg"
	],
	"file_history":
	[
		"/home/cyann/projects/web/Game4Kids/msg/fr.js",
		"/home/cyann/projects/web/Game4Kids/msg/global.js",
		"/home/cyann/projects/web/Game4Kids/js/FileSaver.js",
		"/home/cyann/projects/web/Game4Kids/core/blockly/blocks/actor.js",
		"/home/cyann/projects/web/Game4Kids/core/game4k/actor.js",
		"/home/cyann/projects/web/Game4Kids/test.html",
		"/home/cyann/projects/web/Game4Kids/msg/en.js",
		"/home/cyann/projects/web/Game4Kids/js/jszip/FileSaver.js",
		"/home/cyann/projects/web/Game4Kids/core/game4k/game.js",
		"/home/cyann/projects/web/Game4Kids/index.js",
		"/home/cyann/projects/web/Game4Kids/index.html",
		"/home/cyann/projects/web/Game4Kids/core/blockly/generators/javascript/actor.js",
		"/home/cyann/projects/web/Game4Kids/core/blockly/blocks/anim.js",
		"/home/cyann/projects/web/Game4Kids/core/blockly/blocks/event.js",
		"/home/cyann/projects/web/Game4Kids/core/blockly/mutator.js",
		"//gesfileclust1/CARONYN$/Desktop/Game4Kids/msg/en.js",
		"//gesfileclust1/CARONYN$/Desktop/Game4Kids/core/blockly/blocks/event.js",
		"//gesfileclust1/CARONYN$/Desktop/Game4Kids/msg/fr.js",
		"//gesfileclust1/CARONYN$/Desktop/Game4Kids/core/blockly/blocks/actor.js",
		"//gesfileclust1/CARONYN$/Desktop/Game4Kids/test.html",
		"/C/Users/caronyn/Documents/ISupConfigTools/ISupConverter/outputs/ops/emradio.config.xml"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"renderContent",
			"workspacetocode",
			"init",
			"blocks",
			"Code.renderContent",
			"content_xml",
			"Blockly.Xml.textToDom",
			"Code.workspa",
			"Blockly.Xml.",
			"blocks",
			"TABS_",
			"code.ini",
			"variables",
			"content_xml",
			"tab_xml",
			"loadBlocks",
			"xml",
			"renderContent",
			"content_xml",
			"xml",
			"tabClick",
			"tab_xml",
			"BLOCK_DESTROY",
			"bringToFront",
			"title",
			"generated",
			" = %1",
			"bounce",
			"FromAn",
			"console",
			"connection",
			"thenBlock",
			"valueConnection_",
			"counts",
			"createMap_",
			"createCounts_",
			"self.structure_",
			"self.s",
			"mutation",
			"createCounts_",
			"this.structure_",
			"this",
			"CONTROLS_SEQUENCE_MUTATOR_MIXIN",
			"pendan",
			"mouse",
			"any",
			"colli",
			"\"mouse\"",
			"time",
			"if",
			"and",
			"Code"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			";",
			"INT",
			"BOOL",
			"INT",
			"",
			";"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/cyann/projects/web/PhaserGames/js/blockly/demos/code/code.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17287,
						"regions":
						{
						},
						"selection":
						[
							[
								16510,
								16525
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7488.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/cyann/projects/web/Game4Kids/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22829,
						"regions":
						{
						},
						"selection":
						[
							[
								21522,
								21522
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9712.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/cyann/projects/web/PhaserGames/js/blockly/demos/code/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11759,
						"regions":
						{
						},
						"selection":
						[
							[
								188,
								195
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/cyann/projects/web/Game4Kids/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12195,
						"regions":
						{
						},
						"selection":
						[
							[
								638,
								643
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 311.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Execute file",
	"project": "project.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 260.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
